name: Daily Analysis

on:
  schedule:
    # 每个工作日 09:30 UTC 触发（= 北京时间 17:30）
    - cron: '30 9 * * 1-5'
  # 允许在 Actions 页面手动触发
  workflow_dispatch:

permissions:
  contents: read

# 同一分支只跑一个实例：新的触发会排队，不会取消正在运行的任务
concurrency:
  group: daily-analysis-${{ github.ref }}
  cancel-in-progress: false

jobs:
  run:
    runs-on: ubuntu-latest
    # 放宽超时时间，避免长时间训练或数据源变慢时被系统中断
    timeout-minutes: 120

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: requirements.txt

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run daily analysis
        env:
          # —— 运行参数，与你当前一致；需要时只改这里即可 ——
          RUN_ARGS: >-
            --top 600
            --ind-top-k 10
            --per-industry-top 4
            --ml-lookback-days 1200
            --ml-min-rows 50
            --eval-days 60
            --w-ml 0.40
        run: |
          set -euo pipefail
          mkdir -p reports

          # 语法检查（可选）
          python -m py_compile run_daily.py

          echo "Run at: $(date -u '+%Y-%m-%d %H:%M:%S %Z')" | tee reports/metadata.txt
          echo "Args  : ${RUN_ARGS}" | tee -a reports/metadata.txt

          # 实际运行，同时把完整日志保存下来
          python run_daily.py ${RUN_ARGS} 2>&1 | tee reports/runtime.log

      # 无论成功失败，都把生成物和日志拿回来，便于排错
      - name: Upload report artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: daily-report
          path: |
            reports/**
          if-no-files-found: warn
          retention-days: 14
